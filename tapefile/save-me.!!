Program TapeFile;

{$M 16384,0,81920} { Allow 384k for DSZ and TAPE }
{$X+}

Uses Dos,Crt,SlDriv,Dates,Etc,Filedef,SlFiles,WildChck,SwpExec;

Const NumOfVolumes: byte = 1;
      DirFileName = 'OFFLINE';
    {$IFNDEF DEBUG}
      GenPath     = 'D:\SLBBS\TAPE\TEMP\';
      ProgPath    = 'D:\SLBBS\TAPE\';
    {$ELSE}
      GenPath     = 'D:\SLTEST\';
      ProgPath    = 'D:\SLTEST\';
    {$ENDIF}
Type
    PartialType = (None,OnlyOne,OneOfMany);

    FileListPtr = ^FileListType;
    FileListType = record
     FileName: string[12];
     RecNum  : longint;
     next    : FileListPtr;
     end;
Var
    TimeUserEntered: longint;

    logfile : text;

    ExecStr : string;
    MustAsk : boolean;
    another : boolean;
    good    : boolean;
    DlFile  : string;
    Dir     : DirType;
    Setup   : SetupData;
    EnterN  : String;
    User    : UserType;

    ListRoot: FileListPtr;
    PrevFile: FileListPtr;
    CurFile : FileListPtr;
    NextFile: FileListPtr;


Procedure InitVars;
var h,m,s:word;
  begin
  CurTime(h,m,s);
  TimeUserEntered := SecondsSinceMidnight(h,m,s);

  If ExistFile(Progpath+'TAPEFILE.LOG') then
   begin
   assign(logfile, progpath+'TAPEFILE.LOG');
   append(logfile);
   end
  else
   begin
   assign(logfile, progpath+'TAPEFILE.LOG');
   rewrite(logfile);
   end;

  another:=true;
  DirectVideo:=false;
  UseInsert:=false;
  CapsOn:=false;

  {$IFNDEF DEBUG}
   PathToConfig:='D:\SLBBS\';
  {$ELSE}
   PathToConfig:='D:\SLTEST\';
  {$ENDIF}

  ListRoot := nil;
  PrevFile:=nil;
  CurFile:=nil;
  nextfile:=nil;

  Portnum := 1;

  filemode := 66;
  end;

procedure KillStatusLine;
  var x,y:byte;
  begin
  x:=wherex;y:=wherey;
  if slactive then localonly;
  directvideo := cfg.directvid;
  Window(1,1,80,25);
  gotoxy(1,25);
  textbackground(black);
  clreol;
  gotoxy(x,y);
  directvideo := false;
  if slactive then localandremote;
  end;

procedure InitStatus;
  var x,y: byte;
  begin
  if SlActive then LocalOnly;
  directvideo := cfg.directvid;
  cursoroff;
  x:=wherex;y:=wherey;
  window(1,1,80,25);
  gotoxy(1,25);
  textcolor(white);
  textbackground(blue);
  Write(' User: ',CaseStr(User.Name));
  clreol;
  Gotoxy(34,25);
  Write('TapeFile');
  textbackground(black);
  window(1,1,80,24);
  if y=25 then y:=24;
  gotoxy(x,y);
  clreol;
  CursorOn;
  directvideo := false;
  if SlActive then LocalandRemote;
  end;


{procedure StatusLine;
  var x,y: byte;
  begin
    if SlActive then LocalOnly;
    directvideo := cfg.directvid;
    cursoroff;
    x:=wherex;y:=wherey;
    window(1,1,80,25);

    textbackground(black);
    window(1,1,80,24);
    gotoxy(x,y);
    cursoron;
    directvideo := false;
    if SlActive then LocalAndRemote;
  end;
}



function abort:boolean;
   var t:byte;
       a:boolean;
   begin
   a:=false;
   if keypressed then
    begin
    case readkey of
     ' ': a:=true;
     ^C : a:=true;
    end
    end;

   if a then
    begin
    t:=textattr;
    textattr:=$0C;
    write('^C');
    textattr:=t;
    end;

   abort:=a;
   end;



Procedure InitConfig;
  begin
  Open_Config;
  Read_Config;
  end;

Procedure InitSetup;
  Begin
  Open_Setup(SetupDIR);
  Read_Setup_GenHdr;
  Read_Setup_Hdr;
  end;


Procedure FindSetup;
 procedure ClimbSetup(cur:longint);
  begin
  Read_Setup_Data(cur,Setup);
   case compare(DirFileName, Setup.Name) of
    0: begin
       exit;
       end;
    1: ClimbSetup(setup.leaf.right);
    2: ClimbSetup(setup.leaf.left);
    end;
  end;

  begin
  ClimbSetup(SetupHdr.Root.TreeRoot);
  end;

Procedure OpenDir;
  begin
  Open_Dir(Setup.Path,Setup.Name);
  Read_Dir_GenHdr;
  Read_Dir_Hdr;
  end;

procedure close_log;
 begin
 Close(logfile);
 end;

Procedure Closefiles;
 begin
 Writeln(LogFile, DtTmStamp, ' ',casestr(User.Name),' exited door.');
 Close_User;
 Close_Config;
 Close_Setup;
 Close_Dir;
 Close_Strings;
 Close_log;
 end;

procedure SetupLinkedList;
  var d   :dirtype;
      cnt :longint;

  Procedure Status;
   begin
   write('.');
   end;


  Procedure ClimbDir(cur:longint);
   var l,r:longint;
   begin
   Read_Dir(cur,d);

   r:=d.leaf.right;
   l:=d.leaf.left;

   if d.leaf.left<>0 then ClimbDir(d.leaf.left);

   if l<>0 then Read_Dir(cur,d);

   if ListRoot=Nil then
     begin
     new(CurFile);
     ListRoot := CurFile;
     CurFile^.Next := Nil;
     end
   else
     begin
     PrevFile := CurFile;
     New(CurFile);
     PrevFile^.Next := CurFile;
     CurFile^.Next := Nil;
     end;

   With CurFile^ do
     begin
     FileName := D.Name;
     RecNum := Cur;
     end;

   inc(cnt);
   if (cnt mod 50)=0 then status;

   if r<>0 then ClimbDir(r);

   end;

  begin
  cnt:=0;
  TextColor(cfg.colorchart[normal]);
  Write('Initializing File List');
  ClimbDir(DirHdr.Root.TreeRoot);
  writeln;
  end;

Procedure GetUserData;
  Begin
  Open_User;
  Read_User_GenHdr;
  Read_User_Hdr;
  Read_User(Cfg.CurrUser,User);
  End;

Procedure BarfExit;
  begin
  CloseFiles;
  KillStatusLine;
  Halt(1);
  end;

Procedure Pause;
   begin
   TextColor(cfg.colorchart[Special]);
   write('-- more -- ');
      repeat
       if portcheck then
        If Not Carrier_On then
         begin
         Carrier:=false;
         Exit;
         end;
      until keypressed;
   Readkey;
   if not carrier then BarfExit;
   if ansi then begin gotoxy(1,wherey);clreol end
   else writeln;
   end;


Procedure GetFileName(var N:string);
  begin
  TextBackGround(black);
  TextColor(Cfg.ColorChart[HEADCOLOR]);
  writeln;
  writeln;
  Write('You may enter ');
  TextColor(Cfg.ColorChart[SPECIAL]);
  Write('1 ');
  TextColor(Cfg.ColorChart[HEADCOLOR]);
  Write('File name.');Writeln;

  TextColor(Cfg.ColorChart[NORMAL]);
  Write('Press ');
  TextColor(Cfg.ColorChart[ALTCOLOR]);
  Write('F ');

  TextColor(Cfg.ColorChart[NORMAL]);
  Write('for File List, ');
  TextColor(Cfg.ColorChart[ALTCOLOR]);
  Write('? ');
  TextColor(Cfg.ColorChart[NORMAL]);
  write('for Help, ');
  TextColor(Cfg.ColorChart[ALTCOLOR]);
  Write('ENTER ');
  TextColor(Cfg.ColorChart[NORMAL]);
  writeln('when done.');

  writeln;

  TextColor(Cfg.ColorChart[NORMAL]);
  Write('[');
  TextColor(Cfg.ColorChart[SUBCOLOR]);
  Write(DirFileName);
  TextColor(Cfg.ColorChart[NORMAL]);
  Write(']');
  Write(Tab(Length(DirFileName),8));
  Write('  (');
  TextColor(Cfg.ColorChart[SPECIAL]);
  Write(' 0');
  TextColor(Cfg.ColorChart[NORMAL]);
  Write(' Selected) :');

  Editor(12,n,'',cfg.colorchart[CHATCOLOR],black);
  if not carrier then BarfExit;

  end;

Procedure ProcessFileName(N:string;var DownlFile:String;var g:boolean;var m:boolean);
 function show_file:byte;
  var
      m,d,y: string[2];
      t    : string[4];
      fs   : string[1];
      sf   :byte;


  begin
  sf:=1;
     if (dir.passwd[1]<>0) AND (dir.passwd[2]<>0) AND (dir.passwd[3]<>0) then
     fs := '+' else fs := '';
   str(dir.date.month:2,m);
   str(dir.date.day  :2,d); if d[1]=' 'then d[1] := '0';
   str(dir.date.year :2,y); if y[1]=' 'then y[1] := '0';
   TextColor(Cfg.ColorChart[HeadColor]);

   localonly;
   if (not ansi) and (not(wherex=1)) then
     begin
     localandremote;
     writeln;
     end
   else localandremote;

   if ansi and (not(wherex=1)) then begin
     gotoxy(1,wherey);
     clreol;
     end;

   Write(Dir.Name,tab(ord(dir.name[0]),12));
   TextColor(cfg.Colorchart[AltColor]);
   Write(' ',dir.length*128/1024:7:1,'k');
   TextColor(Cfg.ColorChart[Normal]);
   Write(dir.times:4,' ',m,'-',d,'-',y,' ');
   textcolor(Cfg.ColorChart[SubColor]);
   writeln(dir.descrip);
   if Dir.EDescrip[1][0] <> #0 then
      begin
      write('         ');writeln(dir.edescrip[1]);
      write('         ');writeln(dir.edescrip[2]);
      writeln;
      inc(sf,3);
      end;
  Show_File:=sf;
  end;


 Function MatchFound: boolean;
   begin
   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
    if N=CurFile^.FileName then
      begin
      MatchFound:=True;
      exit;
      end;
    CurFile := CurFile^.Next
    end;
   MatchFound := False
   end;

 Function PartialName: PartialType;
   var count: word;
   begin
   count:=0;
   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
    if N=Copy(CurFile^.FileName,1,length(N)) then
       Inc(Count);
    CurFile := CurFile^.Next
    end;
   case Count of
     1:  begin
         PartialName:=OnlyOne;
         CurFile := ListRoot;
         While CurFile <> Nil do
          begin
          if N=Copy(CurFile^.FileName,1,length(n)) then exit;
          CurFile := CurFile^.Next
          end;
         end;
     0:  PartialName:=none;
     Else PartialName:=OneOfMany;
     End;
   end;

 Procedure ShowAllPartialMatches;
   var t,l:byte;
   begin
   l:=0;
   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
    if N=Copy(CurFile^.FileName,1,length(N)) then
      begin
      Read_Dir(CurFile^.RecNum,Dir);
      if l+4>=User.scrnsize then begin Pause; l:=0 end;
      t:=Show_File;
      if abort then exit;
      inc(l,t);
      end;
    CurFile := CurFile^.Next
    end;
   end;

  Function WildCard: boolean;
   var i:byte;
   begin
   wildcard := false;
   for i:=1 to length(n) do
    begin
    if (n[i]='?') or (n[i]='*') then begin Wildcard:=true; exit end;
    end;
   end;

  procedure ShowAllWildCardMatches;
   var t,l:byte;

   begin
   l:=0;
   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
    if MatchWC(n,CurFile^.FileName) then
      begin
      read_dir(CurFile^.Recnum,dir);
      if l+4>=User.scrnsize then begin Pause; l:=0 end;
      t:=Show_File;
      if abort then exit;
      inc(l,t);
      end;
    CurFile := CurFile^.Next
    end;

   end;


  Function WildMatch: partialtype;
   var
       i:word;
   begin
   i:=0;
   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
    if MatchWC(n,CurFile^.FileName) then inc(i);
    CurFile := CurFile^.Next
    end;

   case i of
    0: begin
       wildmatch:=none;
       exit
       end;
    1: begin
       wildmatch:=onlyone;
       CurFile := ListRoot;
       While CurFile <> Nil do
         begin
         if MatchWC(n,CurFile^.FileName) then exit;
         CurFile := CurFile^.Next
         end;
       end;
    else wildmatch:=oneofmany;
    end
   end;

  Procedure ShowAllFiles;
   var t,l:byte;
   begin
   l:=0;


   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
      begin
      Read_Dir(CurFile^.RecNum,Dir);
      if l+4>=User.scrnsize then begin Pause; l:=0 end;
      t:=Show_File;
      if abort then exit;
      inc(l,t);
      end;
    CurFile := CurFile^.Next
    end;
   end;

 Procedure ZippyScan;
  var s:string;
  function checkin: boolean;
  begin
  checkin := (pos(s,upcasestr(concat(dir.name,dir.descrip,
         dir.edescrip[1],dir.edescrip[2])))>0);
  end;
   var t,l:byte;
       c: word;
       b: boolean;
   begin
   writeln;
   textcolor(cfg.colorchart[normal]);
   writeln;
   Writeln('Enter Pattern to search for..');
   write('>');
   Editor(50,s,'',cfg.colorchart[CHATCOLOR],black);
   if not carrier then BarfExit;

   s:=upcasestr(s);
   textcolor(cfg.colorchart[special]);
   writeln;
   writeln('Searching...');

   l:=0;
   c:=0;
   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
      begin
      Read_Dir(CurFile^.RecNum,Dir);
      inc(c);
      if ((c mod 50)=0) or (c=DirHdr.Root.Entries) then
        begin
        if ansi then begin gotoxy(1,wherey);clreol end
        else writeln;
        textcolor(cfg.colorchart[special]);
        Write(c:4,' files searched');
        end;
      if CheckIn then
        begin
        if l+4>=User.scrnsize then begin Pause; l:=0 end;
        t:=Show_File;
        if abort then exit;
        inc(l,t);
        end;
      end;
    CurFile := CurFile^.Next
    end;

   writeln;
   end;

 procedure WideDir;
   var c,l:byte;
   begin
   l:=0;
   c:=0;
   CurFile := ListRoot;
   writeln;
   textcolor(cfg.colorchart[normal]);
   While CurFile <> Nil do
    begin
    Write(CurFile^.filename,tab(length(CurFile^.filename),13));
    if abort then exit;
    inc(c);
    if c=6 then begin
                writeln;
                c:=0;
                inc(l);
                if l+3>=User.scrnsize then
                  begin
                  Pause;
                  textcolor(cfg.colorchart[normal]);
                  l:=0
                  end;
                end;

    CurFile := CurFile^.Next
    end;
   writeln;
   end;

 Procedure ShowDiskBuffer;
  var fs:searchrec;
      t,l:byte;
      found:boolean;
      rn:longint;


  procedure RecNumOf(var r:longint;var f:boolean);
   begin

   CurFile := ListRoot;
   While CurFile <> Nil do
    begin
    if upcasestr(fs.name)=CurFile^.FileName then
      begin
      f:=True;
      r:=curfile^.recnum;
      exit;
      end;
    CurFile := CurFile^.Next
    end;
   f := False
   end;

  procedure dofile;
   begin
    RecNumOf(rn,found);
    if found then
      begin
      read_dir(rn,dir);
      if l+4>=User.scrnsize then begin Pause; l:=0 end;
      t:=Show_File;
      if abort then exit;
      inc(l,t);
      end;
   end;

  begin
  textcolor(cfg.colorchart[normal]);
  writeln('These files won''t have to be pulled from the tape.');
  writeln;

  t:=0;l:=0;

  findfirst(GenPath+'*.*',AnyFile,fs);
  if doserror=0 then
    begin
    repeat
     begin
     dofile;
     findnext(fs);
     end
    until not (doserror=0);
    end;

  end;


 Procedure ShowHelp;
  begin
  writeln;
  textcolor(cfg.colorchart[normal]);
  writeln('You may enter...');
  writeln('      ...A full length filename');
  writeln('      ...A partial filename (just the first few letters)');
  writeln('      ...A wildcard filespec');
  writeln;
  writeln('In addition, there are several commands you can use..');

  textcolor(cfg.colorchart[headcolor]);write(' F');
  textcolor(cfg.colorchart[normal]);
  writeln(' - Display all files in alphabetical order');

  textcolor(cfg.colorchart[headcolor]);write(' Z');
  textcolor(cfg.colorchart[normal]);
  writeln(' - Perform a Zippy directory scan');

  textcolor(cfg.colorchart[headcolor]);write(' W');
  textcolor(cfg.colorchart[normal]);
  writeln(' - Display a wide directory of files');

  textcolor(cfg.colorchart[headcolor]);write(' S');
  textcolor(cfg.colorchart[normal]);
  writeln(' - Show Files in Disk Buffer');

  end;

  begin
  m:=false;
  g:=true;
  if N='' then
      begin
      g:=false;
      m:=true;
      exit;
      end;
  if N='F' then
      begin
      writeln;
      writeln;
      textbackground(cfg.colorchart[background]);
      textcolor(cfg.colorchart[inverse]);
      write(SlStr(882));
      textbackground(black);
      writeln;
      ShowAllFiles;
      g:=false;
      m:=false;
      exit;
      end;
  if N='?' then
      begin
      g:=false;
      m:=false;
      ShowHelp;
      exit;
      end;
  if N='Z' then
      begin
      g:=false;
      m:=false;
      ZippyScan;
      Exit;
      end;
  if N='W' then
      begin
      g:=false;
      m:=false;
      writeln;
      WideDir;
      exit;
      end;
  if N='S' then
      begin
      g:=false;
      m:=false;
      writeln;
      ShowDiskBuffer;
      exit;
      end;

  If WildCard then
   begin
   case WildMatch of
    onlyone:
     begin
     Read_Dir(CurFile^.RecNum,Dir);
     If Cfg.Ansi then
      begin
      Gotoxy(22+length(DirFileName),Wherey);
      TextColor(Cfg.ColorChart[HEADCOLOR]);
      Write(CurFile^.FileName,Tab(Length(CurFile^.FileName),12));
      TextColor(Cfg.ColorChart[NORMAL]);
      Write(' - ');
      TextColor(Cfg.ColorChart[SUBCOLOR]);
      if length(Dir.Descrip)>(80-Wherex) then
       writeln(copy(dir.descrip,1,80-wherex))
      else
       writeln(Dir.Descrip);
      end;
     DownlFile:=CurFile^.FileName;
     exit;
     end;
    OneOfMany:
     begin
     TextColor(Cfg.ColorChart[Normal]);
     writeln;
     writeln('There are more than one matches for that wildcard.');
     writeln;
     textbackground(cfg.colorchart[background]);
     textcolor(cfg.colorchart[inverse]);
     write(SlStr(882));
     textbackground(black);
     writeln;
     ShowAllWildCardMatches;
     writeln;
     textcolor(cfg.colorchart[normal]);
     DownlFile:='';
     g:=false;
     exit;
     end;
    none: begin
          writeln;
          textcolor(cfg.colorchart[errcolor]);
          writeln(SlStr(876));
          g:=false;
          m:=true;
          exit;
          end;
    end; { case .. }
   end; { if wildcard }

  If MatchFound then
    begin
    Read_Dir(CurFile^.RecNum,Dir);
    If Cfg.Ansi then
     begin
     Gotoxy(22+length(DirFileName),Wherey);
     TextColor(Cfg.ColorChart[HEADCOLOR]);
     Write(CurFile^.FileName,Tab(Length(CurFile^.FileName),12));
     TextColor(Cfg.ColorChart[NORMAL]);
     Write(' - ');
     TextColor(Cfg.ColorChart[SUBCOLOR]);
     if length(Dir.Descrip)>(80-Wherex) then
      writeln(copy(dir.descrip,1,80-wherex))
     else
      writeln(Dir.Descrip);
     end
    else
     begin
     writeln;
     show_File;
     writeln;
     end;
    DownlFile:=CurFile^.FileName;
    exit;
    end;
  case PartialName of
   OnlyOne:
    begin
    Read_Dir(CurFile^.RecNum,Dir);
    If Cfg.Ansi then
     begin
     Gotoxy(22+length(DirFileName),Wherey);
     TextColor(Cfg.ColorChart[HEADCOLOR]);
     Write(CurFile^.FileName,Tab(Length(CurFile^.FileName),12));
     TextColor(Cfg.ColorChart[NORMAL]);
     Write(' - ');
     TextColor(Cfg.ColorChart[SUBCOLOR]);
     if length(Dir.Descrip)>(80-Wherex) then
      writeln(copy(dir.descrip,1,80-wherex))
     else
      writeln(Dir.Descrip);
     end
    else
     begin
     writeln;
     Show_File;
     writeln;
     end;
    DownlFile:=CurFile^.FileName;
    exit;
    end;
   OneOfMany:
    begin
    TextColor(Cfg.ColorChart[Normal]);
    writeln;
    writeln('There are more than one matches for that partial filename');
    writeln;
     textbackground(cfg.colorchart[background]);
     textcolor(cfg.colorchart[inverse]);
     write(SlStr(882));
     textbackground(black);writeln;
    ShowAllPartialMatches;
    writeln;
    textcolor(cfg.colorchart[normal]);
    DownlFile:='';
    g:=false;
    exit;
    end;
   none:
    begin
    writeln;
    textcolor(cfg.colorchart[errcolor]);
    writeln('No files found matching that partial name.');
    g:=false;
    m:=true;
    exit;
    end;
   end; { case partialname of }

 end;

function AskIfEnterAnother: boolean;
  var r:byte;
  begin
  TextColor(Cfg.colorchart[normal]);
  writeln;
  write('Pick another file? ');

  GetChoice(2, 'Yes No',Cfg.ColorChart[InVerse],Cfg.ColorChart[BackGround],
            Cfg.ColorChart[Normal],r);
  if not carrier then barfexit;

  if r=1 then AskIfEnterAnother:=true else AskIfEnterAnother:=False;
  end;

function AskifSure:boolean;
  var r:byte;
  begin
  TextColor(Cfg.colorchart[normal]);
  writeln;
  writeln('It will take approximately 2 minutes to get the file from the');
  writeln('tape drive.  Then you will be able to download it using Zmodem.');
  writeln;
  write('Continue? ');

  GetChoice(2, 'Yes No',Cfg.ColorChart[InVerse],Cfg.ColorChart[BackGround],
            Cfg.ColorChart[Normal],r);
  if not carrier then barfexit;

  if r=1 then AskIfSure:=true else AskIfSure:=False;
  end;


procedure WhichVolume(f:string;var v:byte);
  var z:byte;

  function InText:boolean;
    type bffrtype = array[1..20480] of char;
    var tfile: text;
        ts   : string;
        bffr : ^bffrtype;

    begin
    new(bffr);
    intext:=false;
    assign(tfile,ProgPath+'VOLUME.'+Tostrb(z));
    reset(tfile);
    SetTextBuf(tfile, bffr^,sizeof(bffr^));
    readln(tfile,ts);

    repeat
     begin
     ts:=copy(upcasestr(Rtrim(ts)),1,20);
     if pos(f,ts)<>0 then
      begin
      intext:=true;
      dispose(bffr);
      exit;
      end;

     readln(tfile,ts);
     end
    until eof(tfile);
    dispose(bffr);
    end;

  begin
  v:=0;
  for z:=1 to NumOfVolumes do
    begin
    If InText then
       begin
       v:=z;
       exit;
       end;
    end;
  end;

function GrabFromTape:integer;
  var volume: byte;

      ssm1  : longint;
      ssm2  : longint;

      h,m,s : word;
  begin

  writeln;
  textcolor(cfg.colorchart[altcolor]);
  write('Please wait, determining volume... ');

  WhichVolume(DlFile,volume);

  if volume=0 then
    begin
    writeln;
    writeln;
    textcolor(cfg.colorchart[errcolor]);
    writeln('Ack!  File ', DlFile,' not found on any tape volumes!');
    writeln('Please report to Sysop! ');
    BarfExit;
    end;

  writeln('File Found, Volume ',volume);

  writeln;
  TextColor(cfg.colorchart[headcolor]);
  textcolor(lightgray);
  ExecStr:='RESTORE \FILES\OFFLINE\'+DlFile+' '+GenPath+' /V='+Tostrb(volume)+'/P/-O';
  KillStatusLine;

  release(listroot);
  NoComInput;
  curtime(h,m,s);
  ssm1:=secondssincemidnight(h,m,s);
  {$IFNDEF DEBUG}
  grabfromtape:=do_Exec('D:\SLBBS\TAPE\TAPE.EXE',ExecStr,USE_FILE,$ffff,FALSE);
  {$ENDIF}
  curtime(h,m,s);
  ssm2:=secondssincemidnight(h,m,s)-ssm1;
  Writeln(LogFile, DtTmStamp, ' ',DlFile,' restored from tape, took ',ssm2:4, ' seconds.');
  ComInput;

  InitStatus;
  end;

Procedure SendZmodem;
  begin

  TextColor(cfg.colorchart[headcolor]);
  writeln;
  writeln(SlStr(815),'Zmodem');

  ExecStr:='sz '+GenPath+DlFile;

    KillStatusLine;
    {$IFDEF DEBUG} ClrScr; {$ENDIF}
    {$IFNDEF DEBUG}
    LocalOnly;
    NoComInput;
    ClrScr;
    writeln;

    Writeln(User.name,' downloading ', Dlfile);
    Exec('D:\DSZ.COM',ExecStr);
    Writeln(LogFile, DtTmStamp, ' ',DlFile,' sent.');

    writeln;
    ComInput;
    LocalAndRemote;
    {$ENDIF}

  end;

procedure GetFileEntry;   { value returned in EnterN }
  begin
   repeat
    begin
    GetFileName(EnterN);
    EnterN := UpCaseStr(EnterN);

    ProcessFileName(EnterN,DlFile,good,mustask);
    if ((not good) and mustask) then another:=AskIfEnterAnother;

    end
   until (not another) or good;
  end;

Procedure SendFile;
    var err:integer;
        ef : boolean;
    begin

    ef:=existfile(genpath+dlfile);
    err:=0;
    If (not ef) then err:=GrabFromTape else
     begin
     writeln;
     writeln('You lucked out!  The file was in the disk buffer.');
     writeln;
     end;

    ef:=existfile(genpath+dlfile);

    if (Data^.RsActive and (err=0) and ef) then
       SendZmodem
    else begin
         writeln;
         textcolor(cfg.colorchart[errcolor]);
         writeln(' Error: ',err,' please report to sysop! ');
         writeln;
         writeln(logfile, DtTmStamp, ' Error: ',err);
         end
    end;

Function TimeLeft: longint;
var h,m,s:word;
  begin
  curtime(h,m,s);

  TimeLeft := ( Cfg.TimeLimit*60 ) -
             (  SecondsSinceMidnight(h,m,s)
              - SecondsSinceMidnight(Cfg.Logtime.Hour,Cfg.Logtime.minute,0)
             )
  end;

Function CheckLimits: boolean;
  var i:longint;
      t:boolean;
      br:word;
  begin
  CurFile := ListRoot;
  While CurFile <> Nil do
    begin
    if CurFile^.FileName=DlFile then
      begin
      i:=CurFile^.RecNum;
      end;
    CurFile := CurFile^.Next
    end;

  Read_Dir(i,dir);

  CheckLimits := true;
  if (data^.rsactive or cfg.rsactive) then
   begin

 { this don't work !!!
   if
      (((((Setup.Value*10*Dir.Length*128) div 1024)+User.Downloads) div
       User.Uploads)>User.Access.Ratio)
    then begin
         CheckLimits:=false;
         writeln;
         Textcolor(cfg.colorchart[special]);
         writeln('Picking that file would overrun your ratio');
         end;
 }

   case cfg.baudrate of
    2:br:=30;
    4:br:=120;
    5:br:=240;
    6:br:=480;
    7:br:=960
    else br:=180;
    end;

   if
      ( (Dir.Length*128) div br ) > Timeleft
    then begin
         CheckLimits:=False;
         Writeln;
         Textcolor(cfg.colorchart[special]);
         writeln(SlStr(814));
         end;

   end;
  end;


begin
   InitVars;
   clrscr;
   writeln('Please Wait... Will Take 10 seconds...');
   writeln;
   InitConfig;

   Open_Strings;

   PortCheck := Cfg.RsActive;

   InitSetup;

   Ansi:=Cfg.Ansi;
   FindSetup;
   GetUserData;

   Writeln(LogFile, DtTmStamp, ' ',CaseStr(User.Name),' entered door.');

   InitStatus;
   OpenDir;
   SetupLinkedList;
   textcolor(cfg.colorchart[normal]);
   writeln;
   writeln('This door  allows you to access files which  are stored on the');
   writeln('tape drive.   The list of these files is the OFFLINE directory');
   writeln('in the Files section. You can use the Zippy command from there');
   writeln('to scan for a word or phrase.');
   writeln;
   writeln('It will take about 2 minutes to get the file off the tape,  so');
   writeln('please be patient, and don''t hang up.');
   writeln;
   write('At the file prompt, enter ');
   textcolor(cfg.colorchart[headcolor]);
   write('?');
   textcolor(cfg.colorchart[normal]);
   writeln(' to see a list of special commands.');
   writeln;

    GetFileEntry;

    if Good then
      if CheckLimits then
        if AskifSure then SendFile;


    CloseFiles;
    KillStatusLine;
end.
